name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: 'pip'
        cache-dependency-path: requirements.txt

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov pytest-timeout

    - name: Run fast tests with coverage
      run: |
        pytest tests/ \
          -m "not slow" \
          --cov=video_gen \
          --cov=app \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term \
          --cov-fail-under=75 \
          --timeout=30 \
          --maxfail=5 \
          -v
      env:
        PYTHONPATH: ${{ github.workspace }}

    - name: Upload coverage to artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: |
          coverage.xml
          htmlcov/
        retention-days: 30

    - name: Coverage comment on PR
      if: github.event_name == 'pull_request'
      uses: py-cov-action/python-coverage-comment-action@v3
      with:
        GITHUB_TOKEN: ${{ github.token }}
        MINIMUM_GREEN: 85
        MINIMUM_ORANGE: 75

    - name: Generate coverage badge
      if: github.ref == 'refs/heads/main'
      run: |
        coverage_percent=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(round(float(root.attrib['line-rate']) * 100, 2))")
        echo "COVERAGE=$coverage_percent" >> $GITHUB_ENV
        echo "Coverage: $coverage_percent%"

    - name: Test summary
      if: always()
      run: |
        echo "## Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ -f coverage.xml ]; then
          coverage_percent=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(round(float(root.attrib['line-rate']) * 100, 2))")
          echo "- Coverage: $coverage_percent%" >> $GITHUB_STEP_SUMMARY
        fi
        echo "- Test Suite: Fast tests only (slow tests excluded)" >> $GITHUB_STEP_SUMMARY
        echo "- Python Version: 3.10" >> $GITHUB_STEP_SUMMARY
